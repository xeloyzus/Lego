
clear; close all;   % Tøm arbeidsområdet og lukk alle figurer
online = false;      % Online modus (EV3) eller offline modus (last data)?
plotting = true;    % Skal data plottes i sanntid?
filename = 'Prosjekt01_NumeriskIntegrasjon/Chirp/P01_chirp_justert.mat'; % Filnavn for lagring/lasting av data

if online
    mylego = legoev3('USB');
    joystick = vrjoystick(1);
    [JoyAxes, JoyButtons] = HentJoystickVerdier(joystick);
    myColorSensor = colorSensor(mylego);
    mymotor = motor(mylego, 'A');
else
    load(filename);  % Last Tid, Lys osv.
end

fig1 = figure;
set(gcf, 'Position', [100, 100, 800, 600]);
drawnow;

JoyMainSwitch = 0;
k = 0;
y = zeros(size(Tid));
u = zeros(size(Tid));
T_s = [];
fc = 1.4;                          % Lavpass cutoff-frekvens (justert for bedre filtrering)
tau = 1 / (2*pi*fc);

u_filtrert = zeros(size(Tid));


while ~JoyMainSwitch
    k = k + 1;

    if online
        if k == 1
            tic;
        end
        Tid(k) = toc;
        Lys(k) = double(readLightIntensity(myColorSensor, 'reflected'));
        [JoyAxes, JoyButtons] = HentJoystickVerdier(joystick);

        if length(JoyButtons) >= 1
            JoyMainSwitch = JoyButtons(1);
        end
        
        % Motorstyring for chirp-signal (rampe 0-100% mellom 2-15 sek)
        if Tid(k) < 2
            motor_speed = 0;
        elseif Tid(k) >= 2 && Tid(k) <= 15
            motor_speed = round((Tid(k) - 2) / 13 * 100);  % Lineær økning
        else
            motor_speed = 100;  % Hold på 100%
        end
        mymotor.Speed = motor_speed;
        start(mymotor);
    else
        if k > length(Tid)
            JoyMainSwitch = 1;
        end
        if plotting
            pause(0.03);
        end
    end

    %=== BEREGNINGER ===
    if k <= length(Lys)
        % Dynamisk baseline-justering (kun under første 2 sek når motor er av)
        if Tid(k) < 2
            LysInit = mean(Lys(15:end));  % Glidende gjennomsnitt
        end
        u(k) = Lys(k) - LysInit;
    end

    if k == 1
        T_s(k) = 0.05;       % Antar 20 Hz sampling i starten
        y(k) = u(k);
        u_filtrert(k) = u(k);  % Initielt filtrert signal starter med u(k)
    else
        if k <= length(Tid) && k <= length(u)
            T_s(k) = Tid(k) - Tid(k-1);
            alfa = 0.06;
            
            % Lavpassfiltering med justert tau
            u_filtrert(k) = (1 - alfa) * u(k) + alfa * u_filtrert(k-1);
            
            % Trapesintegrasjon med filtrert signal
            y(k) = y(k-1) + (T_s(k) / 2) * (u_filtrert(k-1) + u_filtrert(k));
        end
    end


    %+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    % PLOTTING AV DATA

    if plotting || JoyMainSwitch

        if k <= length(Tid) && k <= length(u) && k <= length(y)

            subplot(2, 1, 1);
            plot(Tid(1:k), u(1:k), 'b-', 'LineWidth', 1.5);
            title('Vannstr{\aa}m inn og ut av Ballong','Interpreter','latex');
            ylabel('(Liter/s)');
            grid on;
            if k > 1
                xlim([min(Tid(1:k)), max(Tid(1:k))]);
            end
            ylim([min(u(1:k)) - 1, max(u(1:k)) + 1]);
            

            subplot(2, 1, 2);
            plot(Tid(1:k), y(1:k), 'r-', 'LineWidth', 1.5);
            title('Ballong Volum','Interpreter','latex');
            xlabel('Tid [sek]');
            ylabel('(Liter)');
            grid on;
            if k > 1
                xlim([min(Tid(1:k)), max(Tid(1:k))]);
            end
            ylim([min(y(1:k)) - 1, max(y(1:k)) + 1]);
            drawnow;
        end
    end
end

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
% AVSLUTNING: STOPP MOTOR OG LAGRE DATA

% Legg til legend
subplot(2, 1, 1);
legend('$\{u_k\}$', 'Interpreter', 'latex');

subplot(2, 1, 2);
legend('$\{y_k\}$', 'Interpreter', 'latex');

% Stopp motor før avslutning

% AVSLUTNING: STOPP MOTOR
if online
    stop(mymotor); % Stopp motor før avslutning
end

if online
    % Lagre data
    %save('P01_chirp.mat', 'Tid', 'Lys', 'JoyPot'); % RETTET: Lagre data
end